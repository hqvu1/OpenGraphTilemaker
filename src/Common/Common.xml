<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common</name>
    </assembly>
    <members>
        <member name="M:Common.Extensions.DataTypeExtensions.IsPureAlphaNumeric(System.String)">
            <summary>
            Checks for a-z A-Z 0-9 only.
            </summary>
            <param name="value">value.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:Common.Extensions.DataTypeExtensions.IsAlphaNumeric(System.String)">
            <summary>
                Checks for a-z A-Z 0-9 spaces and commas.
            </summary>
            <param name="value">value.</param>
            <returns>True or false.</returns>
        </member>
        <member name="M:Common.GetName.Of``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <remarks>
                http://blogs.msdn.com/csharpfaq/archive/2010/01/06/getting-information-about-objects-types-and-members-with-expression-trees.aspx.
            </remarks>
        </member>
        <member name="T:Common.IoCAttribute">
            <inheritdoc />
            <summary>
                Decorates a class as IoC injected. No direct instantiation is necessary.
            </summary>
        </member>
        <member name="T:Ardalis.GuardClauses.GuardClauseExtensions">
            <summary>
            Assertion Guard.
            </summary>
            <summary>
             Condition Guard.
            </summary>
            <summary>
            Default Guard.
            </summary>
            <summary>
                EnumGuard.
            </summary>
            <summary>
            Foo Guard.
            </summary>
            <summary>
                MemberExpression.
            </summary>
            <summary>
                Null Guard.
            </summary>
            <summary>
                NullOrEmpty Guard.
            </summary>
            <summary>
                NullOrWhiteSpace.
            </summary>
            <summary>
                A collection of common guard clauses, implemented as extensions.
            </summary>
            <example>
                Guard.Against.Null(input, nameof(input));.
            </example>
            <summary>
                RewindStackTraceMessage.
            </summary>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Assert(Ardalis.GuardClauses.IGuardClause,System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentException" /> if <see cref="!:input" /> is false.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Condition(Ardalis.GuardClauses.IGuardClause,System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentException" /> if <see cref="!:input" /> is true.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Default``1(Ardalis.GuardClauses.IGuardClause,``0,System.String)">
            <summary>
                Throws an <see cref="T:Common.Exceptions.ArgumentDefaultException" /> if <see cref="!:input" /> is the default value.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:Common.Exceptions.ArgumentDefaultException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Default``1(Ardalis.GuardClauses.IGuardClause,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Throws an <see cref="T:Common.Exceptions.ArgumentDefaultException" /> if <see cref="!:input" /> is the default value.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="input" /> expression is invalid.</exception>
            <exception cref="T:Common.Exceptions.ArgumentDefaultException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Enum(Ardalis.GuardClauses.IGuardClause,System.Object,System.Type,System.String)">
            <summary>
                Throws an <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> if <see cref="!:input" /> is not a valid value for the defined
                <see cref="!:enumClass" />.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="enumClass"></param>
            <param name="parameterName"></param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Enum``1(Ardalis.GuardClauses.IGuardClause,System.Linq.Expressions.Expression{System.Func{``0}},System.Type)">
            <summary>
                Throws an <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> if <see cref="!:input" /> is not a valid value for the defined
                <see cref="!:enumClass" />.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="enumClass"></param>
            <exception cref="T:System.ArgumentException">The <paramref name="input" /> expression is invalid.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Null``1(Ardalis.GuardClauses.IGuardClause,``0,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentNullException" /> if <see cref="!:input" /> is null.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.Null``1(Ardalis.GuardClauses.IGuardClause,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Throws an <see cref="T:System.ArgumentNullException" /> if <see cref="!:input" /> is null.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="input" /> expression is invalid.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NullOrEmpty(Ardalis.GuardClauses.IGuardClause,System.String,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentNullException" /> if <see cref="!:input" /> is null.
                Throws an <see cref="T:System.ArgumentException" /> if <see cref="!:input" /> is an empty string.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NullOrEmpty(Ardalis.GuardClauses.IGuardClause,System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
                Throws an <see cref="T:System.ArgumentNullException" /> if <see cref="!:input" /> is null.
                Throws an <see cref="T:System.ArgumentException" /> if <see cref="!:input" /> is an empty string.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="input" /> expression is invalid.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NullOrWhiteSpace(Ardalis.GuardClauses.IGuardClause,System.String,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentNullException" /> if <see cref="!:input" /> is null.
                Throws an <see cref="T:System.ArgumentException" /> if <see cref="!:input" /> is an empty or white space string.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.NullOrWhiteSpace(Ardalis.GuardClauses.IGuardClause,System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
                Throws an <see cref="T:System.ArgumentNullException" /> if <see cref="!:input" /> is null.
                Throws an <see cref="T:System.ArgumentException" /> if <see cref="!:input" /> is an empty or white space string.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="input" /> expression is invalid.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange(Ardalis.GuardClauses.IGuardClause,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
                Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <see cref="!:input" /> is less than <see cref="!:rangeFrom" />
                or greater than <see cref="!:rangeTo" />.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <param name="rangeFrom"></param>
            <param name="rangeTo"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange(Ardalis.GuardClauses.IGuardClause,System.Linq.Expressions.Expression{System.Func{System.Int32}},System.Int32,System.Int32)">
            <summary>
                Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <see cref="!:input" /> is less than <see cref="!:rangeFrom" />
                or greater than <see cref="!:rangeTo" />.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="rangeFrom"></param>
            <param name="rangeTo"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="input" /> expression is invalid.</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange(Ardalis.GuardClauses.IGuardClause,System.DateTime,System.String,System.DateTime,System.DateTime)">
            <summary>
                Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <see cref="!:input" /> is less than <see cref="!:rangeFrom" />
                or greater than <see cref="!:rangeTo" />.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <param name="rangeFrom"></param>
            <param name="rangeTo"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfRange(Ardalis.GuardClauses.IGuardClause,System.Linq.Expressions.Expression{System.Func{System.DateTime}},System.DateTime,System.DateTime)">
            <summary>
                Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <see cref="!:input" /> is less than <see cref="!:rangeFrom" />
                or greater than <see cref="!:rangeTo" />.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="rangeFrom"></param>
            <param name="rangeTo"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="input" /> expression is invalid.</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.OutOfSQLDateRange(Ardalis.GuardClauses.IGuardClause,System.DateTime,System.String)">
            <summary>
                Throws an <see cref="T:System.ArgumentOutOfRangeException" /> if <see cref="!:input" /> is not in the range of valid
                <see cref="T:System.Data.SqlTypes.SqlDateTime" /> values.
            </summary>
            <param name="guardClause"></param>
            <param name="input"></param>
            <param name="parameterName"></param>
            <returns>The input for variable initialization.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Ardalis.GuardClauses.GuardClauseExtensions.RewindStackTraceMessage(System.Exception)">
            <summary>
                Rewinds the <see cref="T:System.Diagnostics.StackTrace" /> to remove the <see cref="T:Ardalis.GuardClauses.GuardClauseExtensions" /> code from it.
            </summary>
            <param name="exception"></param>
            <returns>Trimmed <see cref="T:System.Diagnostics.StackTrace" />.</returns>
        </member>
        <member name="T:Ardalis.GuardClauses.Guard">
            <summary>
                An entry point to a set of Guard Clauses defined as extension methods on IGuardClause.
            </summary>
            <remarks>See http://www.weeklydevtips.com/004 on Guard Clauses.</remarks>
        </member>
        <member name="T:Ardalis.GuardClauses.IGuardClause">
            <summary>
                Simple interface to provide a generic mechanism to build guard clause extension methods from.
            </summary>
        </member>
        <member name="T:Ardalis.GuardClauses.GuardException">
            <summary>
                Specialized Guard <see cref="T:System.Exception" /> which overwrites the <see cref="M:Ardalis.GuardClauses.GuardException.ToString" /> method to trim the
                included <see cref="T:System.Diagnostics.StackTrace" />.
            </summary>
        </member>
    </members>
</doc>
